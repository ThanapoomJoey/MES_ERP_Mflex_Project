import streamlit as st
import pandas as pd
import psycopg2
import plotly.express as px
from datetime import datetime, timedelta

# ============== ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ==============
DB_HOST = "localhost"
DB_NAME = "mflex_mes_erp_sim" # ‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
DB_USER = "admin"             # User ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
DB_PASSWORD = "admin123"      # Password ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
DB_PORT = "5432"
DB_SCHEMA = "public"         # Schema ‡∏ó‡∏µ‡πà View Tables ‡∏≠‡∏¢‡∏π‡πà

# ============== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç decorator) ==============
@st.cache_resource(ttl=600) # Cache resource for 10 minutes, and manage its lifecycle
def get_db_connection():
    try:
        conn = psycopg2.connect(
            host=DB_HOST, database=DB_NAME, user=DB_USER, password=DB_PASSWORD, port=DB_PORT
        )
        # For cache_resource, you might need a cleanup function if the resource needs explicit closing
        # In this simple case, the connection is closed in fetch_data_from_view
        # but for more complex resources, a cleanup function is good practice.
        # yield conn # If using a cleanup function with yield
        return conn
    except psycopg2.Error as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetch_data_from_view ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ @st.cache_data ‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô return DataFrame ‡∏ã‡∏∂‡πà‡∏á pickle ‡πÑ‡∏î‡πâ
@st.cache_data(ttl=600)
def fetch_data_from_view(view_name, schema=DB_SCHEMA, date_filter_col=None, start_date=None, end_date=None):
    conn = get_db_connection() # This will now use the cached connection managed by cache_resource
    if not conn:
        return pd.DataFrame()

    query = f"SELECT * FROM {schema}.{view_name}"
    params = []
    conditions = []

    if date_filter_col and start_date and end_date:
        conditions.append(f"{date_filter_col} >= %s AND {date_filter_col} < %s") # < end_date + 1 day
        params.extend([start_date, end_date + timedelta(days=1)])

    if conditions:
        query += " WHERE " + " AND ".join(conditions)

    try:
        df = pd.read_sql_query(query, conn, params=params)
        return df
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å View {view_name}: {e}")
        return pd.DataFrame()
    # finally:
    #     if conn:
    #         conn.close() # ‡∏Å‡∏≤‡∏£ close connection ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢ cache_resource ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ cache_resource ‡∏Å‡πá‡∏ó‡∏≥‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
                         # ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ fetch_data_from_view ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ close connection ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å cache_resource ‡πÄ‡∏≠‡∏á
                         # cache_resource ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ lifecycle ‡∏Ç‡∏≠‡∏á connection

# ... ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ...

# ============== ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Dashboard ==============
st.set_page_config(layout="wide", page_title="‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö MES/ERP Mflex (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
st.title("üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö MES/ERP Mflex (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
st.markdown("‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á")

# ============== Date Range Filter (‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà) ==============
st.sidebar.header("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
default_end_date = datetime.now().date()
default_start_date = default_end_date - timedelta(days=30)

start_date_input = st.sidebar.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", default_start_date)
end_date_input = st.sidebar.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", default_end_date)

if start_date_input > end_date_input:
    st.sidebar.error("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
    st.stop()


# ============== ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Views ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Date Filter ==============
st.header("1. ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û Work Order")
# ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å get_db_connection ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô fetch_data_from_view
# ‡πÅ‡∏•‡∏∞ fetch_data_from_view return DataFrame ‡∏ã‡∏∂‡πà‡∏á cache ‡∏î‡πâ‡∏ß‡∏¢ cache_data ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
# ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£ cache connection object ‡πÄ‡∏≠‡∏á
df_wo_summary = fetch_data_from_view(
    "vw_workorder_performance_summary",
    date_filter_col="actualstartdate", # ‡∏´‡∏£‡∏∑‡∏≠ scheduledstartdate ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å filter ‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£
    start_date=start_date_input,
    end_date=end_date_input
)

st.header("2. ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢")
df_defect_analysis = fetch_data_from_view(
    "vw_defect_analysis",
    date_filter_col="defectdate",
    start_date=start_date_input,
    end_date=end_date_input
)

st.header("3. ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏ï‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£)")
df_prod_agg = fetch_data_from_view(
    "vw_productionlog_aggregated_daily_by_machine_product",
    date_filter_col="productiondate",
    start_date=start_date_input,
    end_date=end_date_input
)


# ============== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û Work Order ==============
if not df_wo_summary.empty:
    st.subheader("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Work Order")
    wo_status_counts = df_wo_summary['workorderstatus'].value_counts().reset_index()
    wo_status_counts.columns = ['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Work Order', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']
    fig_wo_status = px.bar(wo_status_counts, x='‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Work Order', y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Work Order ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
    st.plotly_chart(fig_wo_status, use_container_width=True)

    st.subheader("Work Orders ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏¥‡∏ï‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)")
    st.dataframe(df_wo_summary[['workorderid', 'productname', 'quantitytoproduce', 'quantityproducedgood', 'actualyield', 'workorderstatus', 'actualstartdate', 'actualenddate']].sort_values(by="actualstartdate", ascending=False).head(10))

    col1, col2 = st.columns(2)
    with col1:
        avg_yield = df_wo_summary['actualyield'].mean() if 'actualyield' in df_wo_summary.columns and df_wo_summary['actualyield'].notna().any() else 0
        st.metric("Yield ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á Work Orders", f"{avg_yield:.2%}" if avg_yield else "N/A")
    with col2:
        on_time_wos = df_wo_summary['isontime'].sum() if 'isontime' in df_wo_summary.columns else 0
        total_completed_wos = df_wo_summary[df_wo_summary['workorderstatus'].isin(['Completed', 'Partially_Completed_LowYield'])].shape[0]
        on_time_percentage = (on_time_wos / total_completed_wos * 100) if total_completed_wos > 0 else 0
        st.metric("Work Orders ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤", f"{on_time_percentage:.1f}%" if total_completed_wos > 0 else "N/A")

else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Work Order ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

st.markdown("---")
# ============== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢ ==============
if not df_defect_analysis.empty:
    st.subheader("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (Top 5)")
    top_defects = df_defect_analysis['defectdescription'].value_counts().nlargest(5).reset_index()
    top_defects.columns = ['‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö']
    fig_top_defects = px.bar(top_defects, x='‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢', y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö', title="5 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
    st.plotly_chart(fig_top_defects, use_container_width=True)

    st.subheader("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏ï‡∏≤‡∏° Process Area ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£")
    defects_by_machine_area = df_defect_analysis.groupby('machineprocessarea')['defectinstancequantity'].sum().reset_index()
    defects_by_machine_area.columns = ['Process Area ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢']
    fig_defects_area = px.pie(defects_by_machine_area, values='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢', names='Process Area ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£', title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏ï‡∏≤‡∏° Process Area ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£")
    st.plotly_chart(fig_defects_area, use_container_width=True)

else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

st.markdown("---")
# ============== ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ==============
if not df_prod_agg.empty:
    st.subheader("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏° (Good vs. Defect) ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    daily_prod_sum = df_prod_agg.groupby('productiondate').agg(
        TotalGood=('totaloutputgoodquantity', 'sum'),
        TotalDefect=('totaloutputdefectquantity', 'sum')
    ).reset_index()
    daily_prod_sum['productiondate'] = pd.to_datetime(daily_prod_sum['productiondate']) # Convert to datetime if not already

    fig_daily_prod = px.line(daily_prod_sum, x='productiondate', y=['TotalGood', 'TotalDefect'],
                             title="‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏î‡∏µ vs ‡πÄ‡∏™‡∏µ‡∏¢) ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô", labels={'value':'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', 'variable':'‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'})
    st.plotly_chart(fig_daily_prod, use_container_width=True)


    st.subheader("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ (Good Units)")
    prod_by_machine = df_prod_agg.groupby('machinename')['totaloutputgoodquantity'].sum().sort_values(ascending=False).reset_index()
    prod_by_machine.columns = ['‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡πÑ‡∏î‡πâ (‡∏î‡∏µ)']
    fig_prod_machine = px.bar(prod_by_machine.head(10), x='‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£', y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡πÑ‡∏î‡πâ (‡∏î‡∏µ)', title="‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡∏µ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (Top 10)")
    st.plotly_chart(fig_prod_machine, use_container_width=True)
else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

st.sidebar.markdown("---")
st.sidebar.info("Dashboard ‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö MES/ERP ‡∏à‡∏≥‡∏•‡∏≠‡∏á")